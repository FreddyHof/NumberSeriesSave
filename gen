import random
import functions
import misc
import munchhausen

def simple_index_values():
    randomjump = random.choices([-2, -1, 1, 2, 3], [3,6,6,12,8])
    if randomjump[0] > 0:
        randomstart = random.choices([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [4,6,5,8,6,10,7,12,5,8,4,4])
    if randomjump[0] == -1:
        randomstart = random.choices([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [3,4,5,6,7,7,7,6,5,4,3,2,2,2,1])
    if randomjump[0] == -2:
        randomstart = random.choices([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], [5,4,12,5,15,6,9,5,8,3,4,1,3,1,3])
    nlist = [randomstart[0],randomjump[0]]
    return nlist


def hard_index_values():
    randomjump = random.choices([-5,-4,-3,4,5,6,7,8,9])
    if randomjump[0] > 0:
        randomstart = random.choices([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [4,6,5,8,6,10,7,12,5,8,4,4])
    if randomjump[0] < 0:
        randomstart = random.choices([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [5, 4, 12, 5, 15, 6, 9, 5, 8, 3, 4, 1, 3, 1, 3])
    nlist = [randomstart[0],randomjump[0]]
    return nlist


def translate_values_into_index(values, nt=20):
    x = functions.index(values[0], values[1], nt)
    return x


def rand_index(nt=20):
    x = []
    if random.random() > 0.5:
        x = hard_index(nt)
    if random.random() < 0.5:
        x = simple_index(nt)
    return x


def hard_index(nt=20):
    x = []
    x = translate_values_into_index(hard_index_values(), nt)
    return x

def simple_index(nt=20):
    x = []
    x = translate_values_into_index(simple_index_values(), nt)
    return x


def omni(nt=20):
    x = functions.omni(random.randint(0, 8),nt)
    return x


def four_alternate(nt=20):
    x1 = random.choices([-3,-2,-1,0,1,2,3],[3,4,6,5,7,5,4])
    x2 = random.choices([-3,-2,-1,0,1,2,3],[3,4,6,5,7,5,4])
    nlist = functions.four_alternate(x1[0],x1[0],x2[0],x2[0])
    return nlist


def alternate(nt=20):
    x1 = random.choices([-3, -2, -1, 0, 1, 2, 3], [3, 4, 6, 5, 7, 5, 4])
    x2 = random.choices([-3, -2, -1, 0, 1, 2, 3], [3, 4, 6, 5, 7, 5, 4])
    nlist = functions.alternate(x1[0],x2[0])
    return nlist


def multiply_then_subtract1():
    while True:
        m = functions.omni(random.randint(2,4))

        diff_starting_value = random.choices([-2,-1,1,2,3,4,5,6],[5,5,9,7,4,3,3,3])
        diff_starting_value = diff_starting_value[0]

        if diff_starting_value < 0:
            starting_value = diff_starting_value * -64 + random.randint(-10,10)
        else:
            starting_value = random.randint(1,100)
        diff = functions.cumulative_multiplication(diff_starting_value,m)

        if random.random() > 0.9:

            if random.random() > 0.5:
                diff = functions.multiplication(diff,functions.alternate(1, -1))
            else:
                diff = functions.multiplication(diff,functions.alternate(-1, 1))
        nlist = functions.cumulative_summation(diff,starting_value)
        if misc.max_min_difference(nlist[0:7]) < 300:
            return nlist
            break


def multiply_then_subtract2():
    while True:
        m = functions.omni(random.randint(2,4))

        diff_starting_value = random.choices([-2,-1,1,2,3,4,5,6],[5,5,9,7,4,3,3,3])
        diff_starting_value = diff_starting_value[0]
        if diff_starting_value < 0:
            starting_value = diff_starting_value * -64 + random.randint(-10,10)
        else:
            if m == 2:
                starting_value = random.randint(1,100)
            if m == 3:
                starting_value = random.randint(1,20)
            if m == 4:
                starting_value = random.randint(1,10)
            else:
                starting_value = random.randint(1,10)
        diff = functions.cumulative_multiplication(diff_starting_value,m)
        if random.random() > 0.9:
            if random.random() > 0.5:
                diff = functions.multiplication(diff,functions.alternate(1, -1))
            else:
                diff = functions.multiplication(diff,functions.alternate(-1, 1))
        nlist = functions.cumulative_summation(diff,starting_value)
        if misc.max_min_difference(nlist[0:7]) < 300:
            break
    list = functions.multiplication(nlist,m)
    newlist = functions.merge(nlist,list)
    return newlist


def square_medium():
    x = functions.square(simple_index())
    return x


def square_hard():
    x = square_medium()
    o = omni(-1)
    if random.random() > 0.6:
        y = functions.omni(random.randint(-3,3))
    else:
        y = simple_index()
        y = functions.negative(y)
    nlist = functions.addition(x,y)
    return nlist


def hard_multiply_then_subtract():
    nlist = functions.addition(multiply_then_subtract1(),alternate())
    return nlist


def fibonacci():
    i = 0
    while True:
        n0 = 0
        n1 = random.randint(5,10)
        if random.random() > 0.3:
            indexx = random.choices([-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9],[1,1,1,1,3,5,8,14,14,35,25,25,25,20,15,8,7,6])
            var = indexx[0]
            indexx = functions.omni(var)
        else:
            indexx = simple_index()
        i += 1
        nlist = functions.fibonacci(n0,n1,indexx)
        if misc.count_negative(nlist[0:6]) == 0:
            break
    return nlist


def crazy_shmazy():
    nlist = []
    if random.random() > 0.7:
        cool_list = [7, 70, 133, 139, 193, 226, 236, 239, 262, 263, 293, 313, 319, 326, 329, 331, 356, 362, 365, 367,
                     368, 376, 379, 386, 391, 392, 397, 469, 496, 536, 563, 622, 623, 632, 635, 637, 638, 649, 653, 673,
                     683, 694, 700, 736, 739, 763, 793, 836, 863, 899, 913, 923, 931, 932, 937, 946, 964, 973, 989, 998,
                     1033, 1039]
        selection = random.choice(cool_list)
        nlist = munchhausen.crazy_shmazy(selection)
    else:
        while True:
            selection = random.randint(1,320)
            nlist = munchhausen.crazy_shmazy(selection)[0:40]
            if 1 not in nlist:
                break
    return nlist

def cumulative_summation_megaeasy():
    nlist = functions.cumulative_summation(omni(),random.randint(1,20))
    return nlist

def cumulative_summation_easy():
    nlist = functions.cumulative_summation(alternate(),random.randint(1,20))
    return nlist


def cumulative_summation():
    nlist = functions.cumulative_summation(simple_index(),random.randint(1,20))
    return nlist


def cumulative_summation_harder():
    list = cumulative_summation()
    annoyance = functions.alternate(0,random.randint(-3,3))
    nlist = functions.addition(list,annoyance)
    return nlist


def cumulative_multiplication_alternate():
    m1 = 2
    m2 = random.randint(2, 4)
    start1 = random.randint(1, 15)
    var = round(120/(m2 ** 3))
    start2 = random.randint(1, var)
    omnim1 = functions.omni(m1)
    omnim2 = functions.omni(m2)
    list1 = functions.cumulative_multiplication(start1, omnim1)
    list2 = functions.cumulative_multiplication(start2, omnim2)
    nlist = functions.merge(list1,list2)
    return nlist


def cumulative_multiplication_alternate_annoying():
    annoyance = functions.alternate(random.randint(-3, 3), 0)
    list = cumulative_multiplication_alternate()
    nlist = functions.addition(annoyance,list)
    return nlist




def easiest_index_merge():
    nlist = []
    x = simple_index()
    y = []
    if random.random() > 0.4:
        if random.random() > 0.85:
            y = omni()
        else:
            y = alternate()
    else:
        y = simple_index()
    nlist = functions.merge(x,y)
    return nlist


def easy_index_merge():
    nlist = []
    xHard = False
    if random.random() > 0.5:
        x = simple_index()
    else:
        x = hard_index()
        xHard = True
    y = []
    if random.random() > 0.6 and xHard:
        y = alternate()
    else:
        if xHard:
            y = simple_index()
        else:
            y = hard_index()
    nlist = functions.merge(x,y)
    return nlist
