import random
import gen
import functions
import misc
import time
import modes
import newmain2misc

help_text = """
You have to find the next number in a number series.
There are 4 difficulties, you can get them by typing
'easiest'
'easy'
'medium'
'hard'
If you want a mix of difficulties, you can use '1-3' for
example, if you want easiest-medium. Typing 'random' is
the same as typing '1-4'.

After getting a number series, use:
'skip' - to get a new series,
'next number' - to get the next number in the series,
'hint' - to get a hint :)
'answer' - to get the answer

If you want to see how many series you can get in a timeframe,
lets say, you want a 30 seconds limit on the easiest difficulty, enter:
'easiest 30'
You could also do something like:
'1-4 30'
to get all possible difficulties.

You could also limit yourself via question amount, not time, lets say
12 questions on the easiest difficulty, by entering:
'12 easiest'

That's it, hope you pass the iq test"""

user_input = ""
mode = ""
set_clues = 6
clues_count = set_clues
first_turn = True
we_doing_a_thing = False
ans_count = 0
q_count = 0
answered_correctly = False
answer = None
number_series = None
need_random = False
print_new_series = False
initiated = False
timed = False
quiz = False
mode_change = False
hint = "no question, no hint"

print("Enter 'help' to get help.")
while True:
    user_input = input("> ")

    if misc.quiz_timed_detector(user_input)[0]:
        frozen_user_input = user_input.split()
        x = misc.quiz_timed_detector(user_input)
        start_time = time.time()
        ans_count = 0
        q_count = 0
        print_new_series = True
        if x[1]:
            print(f"Game started with {frozen_user_input[0]} questions")
            user_input = frozen_user_input[1]
            q_count = 0
            ans_count = 0
            quiz = True
        if x[2]:
            print(f"Game started with {frozen_user_input[1]} seconds")
            user_input = frozen_user_input[0]
            q_count = 0
            ans_count = 0
            timed = True
        initiated = True
    if initiated:
        print_new_series = True
        if quiz:
            if q_count == int(frozen_user_input[0]):
                end_time = time.time()
                if ans_count == 1:
                    s = "question"
                else:
                    s = "questions"
                print(f"You have completed the quiz and answered {ans_count}/{q_count} {s} correctly "
                      f"with an accuracy of {round(ans_count/q_count, 0) * 100}%. It took {round(end_time-start_time, 1)} seconds.")
                quiz = False
                initiated = False
        if timed:
            if time.time() - start_time > int(frozen_user_input[1]):
                end_time = time.time()
                time_diff = end_time - start_time
                if ans_count == 1:
                    s = "question"
                else:
                    s = "questions"
                print(f"Time's over! You were given a total of {q_count-1} questions and "
                      f"answered {ans_count} {s} in {time_diff} seconds, meaning you "
                      f"took around {round(time_diff/ans_count, 1)} seconds per question.")
                time = False
                initiated = False





    if misc.is_mode_input_identifier(user_input) == 1:
        print_new_series = True
        mode = misc.translate_1to4_into_random_mode(user_input)
        mode_change = True
        need_random = True
        freeze_ui = user_input
    elif misc.is_mode_input_identifier(user_input) == 2:
        print_new_series = True
        need_random = False
        mode = misc.translator[user_input]
        mode_change = True
    else:
        if need_random:
            mode = misc.translate_1to4_into_random_mode(freeze_ui)
            mode_change = True
    if mode_change:
        print(f"Difficulty: {misc.translator2[str(mode)]}")
        mode_change = False


    if user_input == "skip":
        print_new_series = True

    if user_input == "next number":
        clues_count += 1
        print_new_series = False
        print(*number_series[0:clues_count], sep=", ", end=", ... ?\n")

    if user_input == "answer":
        print(f"Answer: {answer}")
        needed_answer = True
        print_new_series = False

    if user_input == "hint":
        print(f"Hint: {hint}")
        print_new_series = False

    if user_input == "help":
        print(help_text)

    if user_input == "exit":
        print("Simulation exited \n")
        initiated = False
        timed = False
        quiz = False
        print_new_series = False



    if user_input == str(answer): #Answer checker
        print_new_series = True
        if needed_answer:
            print("needed")
            print(misc.correct_needed_answer()[0] + "\n")
        else:
            print(misc.correct()[0] + "\n")
            ans_count += 1
    else:
        try:
            val = int(user_input)
            print(random.choices(["nop", "no", "twosch", "false", "nope", "nah", "incorrect!"])[0])
        except ValueError:
            pass

    if print_new_series:
        q_count += 1
        needed_answer = False
        clues_count = set_clues
        if mode == "1":
            current_problem = modes.easiest()
        if mode == "2":
            current_problem = modes.easy()
        if mode == "3":
            current_problem = modes.medium()
        if mode == "4":
            current_problem = modes.hard()
        number_series = current_problem[0]
        hint = current_problem[1]
        print(*number_series[0:clues_count], sep=", ", end=", ... ?\n")
        answer = number_series[clues_count]

    print_new_series = False



